//;;;;;
type Int = Zero | S Int;

type List A = Stop | Tail A (List A);//kekw

type Pair A B = First A | Second B; // lol

/*;;;
cool comment
oof*/

type Bool = True | False;/*bruh*/

type Void = /* explanation */ None;
type Empty/*what?*/ = ;

val x: Int = S (S (Zero));


val y: List Bool = Tail True (Tail False Stop);/**/

let is_zero: Int -> Bool = \a -> match /**/ a {
    case Zero: True;
    case S _: False;
};

/*



*/

/*

more comment

*/

let inc: Int -> Int = \x -> S x;/*;;;;;;;*/

let print: Int -> Void = {
    val small: Bool = is_zero a;
    None;
};

let print: List A -> Void = None;


//->