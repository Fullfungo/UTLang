
type Int = Zero | S Int;

type List A = Stop | Tail A (List A);

type Pair A B = First A | Second B;

type Bool = True | False;

type Void = None;
type Empty = ;

val x: Int = S (S (Zero));


val y: List Bool = Tail True (Tail False Stop);

let is_zero: Int -> Bool = \a -> match a {
    case Zero: True;
    case S _: False;
};

let inc: Int -> Int = \x -> S x;

let print: Int -> Void = {
    val small: Bool = is_zero a;
    None;
};

let print: List A -> Void = None;


